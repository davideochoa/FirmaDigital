/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pruebafirmadigital;

import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PublicKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.X509EncodedKeySpec;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Usuario
 */
public class JIFVerificar extends javax.swing.JInternalFrame {
    PublicKey pubKey;
    byte[] sigToVerify;
    Signature sig;
    public JIFVerificar() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JBLlavePublica = new javax.swing.JButton();
        JLLlavePublica = new javax.swing.JLabel();
        JBCertificado = new javax.swing.JButton();
        JLCertificado = new javax.swing.JLabel();
        JBArchivo = new javax.swing.JButton();
        JLArchivo = new javax.swing.JLabel();
        JBValidar = new javax.swing.JButton();

        setClosable(true);
        setTitle("VERIFICAR");

        JBLlavePublica.setText("Seleccionar Llave Publica");
        JBLlavePublica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBLlavePublicaActionPerformed(evt);
            }
        });

        JLLlavePublica.setText("LLAVE PUBLICA: ");

        JBCertificado.setText("Seleccionar Certificado");
        JBCertificado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBCertificadoActionPerformed(evt);
            }
        });

        JLCertificado.setText("Certificado: ");

        JBArchivo.setText("Seleccionar Archivo Certificado");
        JBArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBArchivoActionPerformed(evt);
            }
        });

        JLArchivo.setText("Archivo: ");

        JBValidar.setText("Validar");
        JBValidar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBValidarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(JLArchivo)
                    .addComponent(JBArchivo)
                    .addComponent(JLCertificado)
                    .addComponent(JBCertificado)
                    .addComponent(JLLlavePublica)
                    .addComponent(JBLlavePublica)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(JBValidar)))
                .addContainerGap(542, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(JBLlavePublica)
                .addGap(18, 18, 18)
                .addComponent(JLLlavePublica)
                .addGap(18, 18, 18)
                .addComponent(JBCertificado)
                .addGap(18, 18, 18)
                .addComponent(JLCertificado)
                .addGap(18, 18, 18)
                .addComponent(JBArchivo)
                .addGap(18, 18, 18)
                .addComponent(JLArchivo)
                .addGap(18, 18, 18)
                .addComponent(JBValidar)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JBLlavePublicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBLlavePublicaActionPerformed
        JFileChooser Llave = new JFileChooser();
        
        Llave.setFileSelectionMode( JFileChooser.FILES_ONLY ); 
        int seleccion = Llave.showOpenDialog( this );

        if( seleccion == JFileChooser.APPROVE_OPTION ){
            FileInputStream keyfis = null;
            try {
                keyfis = new FileInputStream(Llave.getSelectedFile().getAbsoluteFile());
                byte[] encKey = new byte[keyfis.available()];
                keyfis.read(encKey);
                keyfis.close();
                
                X509EncodedKeySpec pubKeySpec = new X509EncodedKeySpec(encKey);
                KeyFactory keyFactory = KeyFactory.getInstance("DSA", "SUN");
                pubKey = keyFactory.generatePublic(pubKeySpec);
                
                JLLlavePublica.setText("LLAVE PUBLICA: "+Llave.getSelectedFile().getAbsoluteFile());
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(this,
                                                ex.getMessage(),
                                                "ERROR AL CARGAR LLAVE PUBLICA",                                                                                                
                                                JOptionPane.ERROR_MESSAGE);
                //Logger.getLogger(JIFVerificar.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InvalidKeySpecException ex) {
                JOptionPane.showMessageDialog(this,
                                                ex.getMessage(),
                                                "ERROR AL CARGAR LLAVE PUBLICA",                                                                                                
                                                JOptionPane.ERROR_MESSAGE);
                //Logger.getLogger(JIFVerificar.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NoSuchAlgorithmException ex) {
                JOptionPane.showMessageDialog(this,
                                                ex.getMessage(),
                                                "ERROR AL CARGAR LLAVE PUBLICA",                                                                                                
                                                JOptionPane.ERROR_MESSAGE);
                //Logger.getLogger(JIFVerificar.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NoSuchProviderException ex) {
                JOptionPane.showMessageDialog(this,
                                                ex.getMessage(),
                                                "ERROR AL CARGAR LLAVE PUBLICA",                                                                                                
                                                JOptionPane.ERROR_MESSAGE);
                //Logger.getLogger(JIFVerificar.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this,
                                                ex.getMessage(),
                                                "ERROR AL CARGAR LLAVE PUBLICA",                                                                                                
                                                JOptionPane.ERROR_MESSAGE);
                //Logger.getLogger(JIFVerificar.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_JBLlavePublicaActionPerformed

    private void JBCertificadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBCertificadoActionPerformed
        JFileChooser certificado = new JFileChooser();
        
        certificado.setFileSelectionMode( JFileChooser.FILES_ONLY ); 
        int seleccion = certificado.showOpenDialog( this );

        if( seleccion == JFileChooser.APPROVE_OPTION ){
            FileInputStream sigfis = null;
            try {
                sigfis = new FileInputStream(certificado.getSelectedFile().getAbsoluteFile());
                sigToVerify = new byte[sigfis.available()];
                sigfis.read(sigToVerify);
                sigfis.close();
                
                JLCertificado.setText("CERTIFICADO: "+certificado.getSelectedFile().getAbsoluteFile());
                
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(this,
                                                ex.getMessage(),
                                                "ERROR AL CARGAR CERTIFICADO",                                                                                                
                                                JOptionPane.ERROR_MESSAGE);
                //Logger.getLogger(JIFVerificar.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this,
                                                ex.getMessage(),
                                                "ERROR AL CARGAR CERTIFICADO",                                                                                                
                                                JOptionPane.ERROR_MESSAGE);
                //Logger.getLogger(JIFVerificar.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        
        
        
    }//GEN-LAST:event_JBCertificadoActionPerformed

    private void JBArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBArchivoActionPerformed
        JFileChooser archivo = new JFileChooser();
        
        archivo.setFileSelectionMode( JFileChooser.FILES_ONLY ); 
        int seleccion = archivo.showOpenDialog( this );

        if( seleccion == JFileChooser.APPROVE_OPTION ){
            try {
                sig = Signature.getInstance("SHA256withDSA", "SUN");
                sig.initVerify(pubKey);
                
                FileInputStream datafis = new FileInputStream(archivo.getSelectedFile().getAbsoluteFile());
                BufferedInputStream bufin = new BufferedInputStream(datafis);
                
                byte[] buffer = new byte[1024];
                int len;
                while (bufin.available() != 0) {
                    len = bufin.read(buffer);
                    sig.update(buffer, 0, len);
                };
                
                bufin.close();
            } catch (NoSuchAlgorithmException ex) {
                JOptionPane.showMessageDialog(this,
                                                ex.getMessage(),
                                                "ERROR AL CARGAR ARCHIVO",                                                                                                
                                                JOptionPane.ERROR_MESSAGE);
                //Logger.getLogger(JIFVerificar.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NoSuchProviderException ex) {
                JOptionPane.showMessageDialog(this,
                                                ex.getMessage(),
                                                "ERROR AL CARGAR ARCHIVO",                                                                                                
                                                JOptionPane.ERROR_MESSAGE);
                //Logger.getLogger(JIFVerificar.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InvalidKeyException ex) {
                JOptionPane.showMessageDialog(this,
                                                ex.getMessage(),
                                                "ERROR AL CARGAR ARCHIVO",                                                                                                
                                                JOptionPane.ERROR_MESSAGE);
                //Logger.getLogger(JIFVerificar.class.getName()).log(Level.SEVERE, null, ex);
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(this,
                                                ex.getMessage(),
                                                "ERROR AL CARGAR ARCHIVO",                                                                                                
                                                JOptionPane.ERROR_MESSAGE);
                //Logger.getLogger(JIFVerificar.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this,
                                                ex.getMessage(),
                                                "ERROR AL CARGAR ARCHIVO",                                                                                                
                                                JOptionPane.ERROR_MESSAGE);
                //Logger.getLogger(JIFVerificar.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SignatureException ex) {
                JOptionPane.showMessageDialog(this,
                                                ex.getMessage(),
                                                "ERROR AL CARGAR ARCHIVO",                                                                                                
                                                JOptionPane.ERROR_MESSAGE);
                //Logger.getLogger(JIFVerificar.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
        }
    }//GEN-LAST:event_JBArchivoActionPerformed

    private void JBValidarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBValidarActionPerformed
        try {
            boolean verifies = sig.verify(sigToVerify);
            
            System.out.println("signature verifies: " + verifies);
        } catch (SignatureException ex) {
            JOptionPane.showMessageDialog(this,
                                                ex.getMessage(),
                                                "ERROR AL VERIFICAR ARCHIVO CONTRA CERTIFICADO",                                                                                                
                                                JOptionPane.ERROR_MESSAGE);
            //Logger.getLogger(JIFVerificar.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_JBValidarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JBArchivo;
    private javax.swing.JButton JBCertificado;
    private javax.swing.JButton JBLlavePublica;
    private javax.swing.JButton JBValidar;
    private javax.swing.JLabel JLArchivo;
    private javax.swing.JLabel JLCertificado;
    private javax.swing.JLabel JLLlavePublica;
    // End of variables declaration//GEN-END:variables
}
